name: Build

on:
  push:
    branches:
      - "main"
    paths-ignore:
      - '.gitignore'
      - 'CODEOWNERS'
      - 'LICENSE'
      - '*.md'
      - '*.adoc'
      - '*.txt'
      - '.all-contributorsrc'
  pull_request:
    paths-ignore:
      - '.gitignore'
      - 'CODEOWNERS'
      - 'LICENSE'
      - '*.md'
      - '*.adoc'
      - '*.txt'
      - '.all-contributorsrc'

jobs:
  build:
    strategy:
      matrix:
        java: [ 11, 17 ]
        distribution: [ temurin ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: ${{ matrix.distribution }}
          java-version: ${{ matrix.java }}
          cache: 'maven'
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y-%m")"
        shell: bash
      - name: Cache Maven Repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          # refresh cache every month to avoid unlimited growth
          key: maven-repo-${{ runner.os }}-${{ steps.get-date.outputs.date }}

      - name: Build with Maven
        run: mvn -B formatter:validate install -Dnative --file pom.xml

      - name: Kubernetes KinD Cluster
        uses: container-tools/kind-action@v1
        with:
          version: v0.11.1
          registry: true
      - name: Install OPM and Operator SDK tool
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "github"
          opm: "1.20.0"
          operator-sdk: "1.17.0"

      - name: Install Operator Lifecycle Manager and Operator SDK into Kind
        run: operator-sdk olm install

      - name: Deploy Joke sample into Kubernetes
        run: |
          K8S_NAMESPACE=operators
          REGISTRY_NAMESPACE=joke
          BUNDLE_IMAGE=$KIND_REGISTRY/$REGISTRY_NAMESPACE/joke-manifest-bundle:latest
          INDEX_IMAGE=$KIND_REGISTRY/$REGISTRY_NAMESPACE/joke-manifest-index:latest

          # Build manifests and images
          cd samples/joke
          mvn clean package -Dquarkus.container-image.build=true \
            -Dquarkus.container-image.push=true \
            -Dquarkus.container-image.insecure=true \
            -Dquarkus.container-image.registry=$KIND_REGISTRY \
            -Dquarkus.container-image.group=$REGISTRY_NAMESPACE \
            -Dquarkus.kubernetes.namespace=$K8S_NAMESPACE

          # Build Operator Bundle
          cd target
          opm alpha bundle generate --directory manifests --package joke --channels alpha --default alpha
          docker build -t $BUNDLE_IMAGE -f bundle.Dockerfile .
          docker push $BUNDLE_IMAGE

          # Install Operator via Bundle
          opm index add --bundles $BUNDLE_IMAGE --tag $INDEX_IMAGE --build-tool docker --skip-tls
          docker push $INDEX_IMAGE

          # Create OLM catalog resource
          cat <<EOF | kubectl apply -f -
          apiVersion: operators.coreos.com/v1alpha1
          kind: CatalogSource
          metadata:
            name: joke-operator
            namespace: $K8S_NAMESPACE
          spec:
            sourceType: grpc
            image: $INDEX_IMAGE
          EOF

          # Wait until the catalog source of our operator is up and running
          # kubectl wait --for=condition=ready pod -n $K8S_NAMESPACE --selector=olm.catalogSource=joke-operator --timeout=120s

          # Create a Subscription which triggers the deployment of joke operator
          cat <<EOF | kubectl create -f -
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: joke-subscription
            namespace: $K8S_NAMESPACE
          spec:
            channel: alpha
            name: joke
            source: joke-operator
            sourceNamespace: $K8S_NAMESPACE
          EOF

          # Wait until the operator is up and running
          retries=30
          until [[ $retries == 0 ]]; do
            new_csv_phase=$(kubectl get csv -n "$K8S_NAMESPACE" jokerequestreconciler -o jsonpath='{.status.phase}' 2>/dev/null || echo "Waiting for CSV to appear")
            if [[ "$new_csv_phase" == "Succeeded" ]]; then
              break
            elif [[ $retries == 1 ]]; then
              echo "CSV \"jokerequestreconciler\" failed to reach phase succeeded"
              exit 1
            else
              kubectl get events -n $K8S_NAMESPACE
              kubectl get pod -n $K8S_NAMESPACE --selector=olm.catalogSource=joke-operator
              kubectl logs -n $K8S_NAMESPACE --selector=olm.catalogSource=joke-operator
              kubectl get events -n $K8S_NAMESPACE
              echo "CSV \"jokerequestreconciler\" phase: $new_csv_phase"
            fi
            sleep 10s
            retries=$((retries - 1))
          done

          # Install Joke CRD: https://github.com/quarkiverse/quarkus-operator-sdk/issues/90
          kubectl apply -f classes/META-INF/fabric8/jokes.samples.javaoperatorsdk.io-v1.yml -n $K8S_NAMESPACE

          # For testing that our operator is responsive, we add a Joke Request resource
          cat <<EOF | kubectl create -f -
          apiVersion: samples.javaoperatorsdk.io/v1alpha1
          kind: JokeRequest
          metadata:
            name: jr-request
            namespace: $K8S_NAMESPACE
          spec:
            category: Any
          EOF

          # And wait for the operator to create another Joke resource
          retries=30
          until [[ $retries == 0 ]]; do
            new_joke=$(kubectl get joke -n "$K8S_NAMESPACE" 2>/dev/null || echo "Waiting for Joke to appear")
            if [[ "$new_joke" =~ .*"NAME".* ]]; then
              break
            elif [[ $retries == 1 ]]; then
              echo "Failed to get jokes"
              exit 1
            fi
            sleep 10s
            retries=$((retries - 1))
          done